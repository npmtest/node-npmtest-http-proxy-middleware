{"/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/test.js":"/* istanbul instrument in package npmtest_http_proxy_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/lib.npmtest_http_proxy_middleware.js":"/* istanbul instrument in package npmtest_http_proxy_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_http_proxy_middleware = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_http_proxy_middleware = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-http-proxy-middleware && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_http_proxy_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_http_proxy_middleware\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_http_proxy_middleware.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_http_proxy_middleware.rollup.js'] =\n            local.assetsDict['/assets.npmtest_http_proxy_middleware.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_http_proxy_middleware.__dirname +\n                    '/lib.npmtest_http_proxy_middleware.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/index.js":"var HPM  = require('./lib');\n\nmodule.exports = function(context, opts) {\n    return new HPM(context, opts);\n};\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/lib/index.js":"var _              = require('lodash');\nvar httpProxy      = require('http-proxy');\nvar configFactory  = require('./config-factory');\nvar handlers       = require('./handlers');\nvar contextMatcher = require('./context-matcher');\nvar PathRewriter   = require('./path-rewriter');\nvar Router         = require('./router');\nvar logger         = require('./logger').getInstance();\nvar getArrow       = require('./logger').getArrow;\n\nmodule.exports = HttpProxyMiddleware;\n\nfunction HttpProxyMiddleware(context, opts) {\n    // https://github.com/chimurai/http-proxy-middleware/issues/57\n    var wsUpgradeDebounced  = _.debounce(handleUpgrade);\n    var wsInitialized       = false;\n    var config              = configFactory.createConfig(context, opts);\n    var proxyOptions        = config.options;\n\n    // create proxy\n    var proxy = httpProxy.createProxyServer({});\n    logger.info('[HPM] Proxy created:', config.context, ' -> ', proxyOptions.target);\n\n    var pathRewriter = PathRewriter.create(proxyOptions.pathRewrite); // returns undefined when \"pathRewrite\" is not provided\n\n    // attach handler to http-proxy events\n    handlers.init(proxy, proxyOptions);\n\n    // log errors for debug purpose\n    proxy.on('error', logError);\n\n    // https://github.com/chimurai/http-proxy-middleware/issues/19\n    // expose function to upgrade externally\n    middleware.upgrade = wsUpgradeDebounced;\n\n    return middleware;\n\n    function middleware(req, res, next) {\n        if (shouldProxy(config.context, req)) {\n            var activeProxyOptions = prepareProxyRequest(req);\n            proxy.web(req, res, activeProxyOptions);\n        } else {\n            next();\n        }\n\n        if (proxyOptions.ws === true) {\n            // use initial request to access the server object to subscribe to http upgrade event\n            catchUpgradeRequest(req.connection.server);\n        }\n    }\n\n    function catchUpgradeRequest(server) {\n        // subscribe once; don't subscribe on every request...\n        // https://github.com/chimurai/http-proxy-middleware/issues/113\n        if (!wsInitialized) {\n            server.on('upgrade', wsUpgradeDebounced);\n            wsInitialized = true;\n        }\n    }\n\n    function handleUpgrade(req, socket, head) {\n        // set to initialized when used externally\n        wsInitialized = true;\n\n        if (shouldProxy(config.context, req)) {\n            var activeProxyOptions = prepareProxyRequest(req);\n            proxy.ws(req, socket, head, activeProxyOptions);\n            logger.info('[HPM] Upgrading to WebSocket');\n        }\n    }\n\n    /**\n     * Determine whether request should be proxied.\n     *\n     * @private\n     * @return {Boolean}\n     */\n    function shouldProxy(context, req) {\n        var path = (req.originalUrl || req.url);\n        return contextMatcher.match(context, path, req);\n    }\n\n    /**\n     * Apply option.router and option.pathRewrite\n     * Order matters:\n          Router uses original path for routing;\n          NOT the modified path, after it has been rewritten by pathRewrite\n     */\n    function prepareProxyRequest(req) {\n        // https://github.com/chimurai/http-proxy-middleware/issues/17\n        // https://github.com/chimurai/http-proxy-middleware/issues/94\n        req.url = (req.originalUrl || req.url);\n\n        // store uri before it gets rewritten for logging\n        var originalPath = req.url;\n        var newProxyOptions = _.assign({}, proxyOptions);\n\n        // Apply in order:\n        // 1. option.router\n        // 2. option.pathRewrite\n        __applyRouter(req, newProxyOptions);\n        __applyPathRewrite(req, pathRewriter);\n\n        // debug logging for both http(s) and websockets\n        if (proxyOptions.logLevel === 'debug') {\n            var arrow = getArrow(originalPath, req.url, proxyOptions.target, newProxyOptions.target);\n            logger.debug('[HPM] %s %s %s %s', req.method, originalPath, arrow, newProxyOptions.target);\n        }\n\n        return newProxyOptions;\n    }\n\n    // Modify option.target when router present.\n    function __applyRouter(req, options) {\n        var newTarget;\n\n        if (options.router) {\n            newTarget = Router.getTarget(req, options);\n\n            if (newTarget) {\n                logger.debug('[HPM] Router new target: %s -> \"%s\"', options.target, newTarget);\n                options.target = newTarget;\n            }\n        }\n    }\n\n    // rewrite path\n    function __applyPathRewrite(req, pathRewriter) {\n        if (pathRewriter) {\n            var path = pathRewriter(req.url, req);\n\n            if (typeof path === 'string') {\n                req.url =  path;\n            } else {\n                logger.info('[HPM] pathRewrite: No rewritten path found. (%s)', req.url);\n            }\n        }\n    }\n\n    function logError(err, req, res) {\n        var hostname = (req.headers && req.headers.host) || (req.hostname || req.host);     // (websocket) || (node0.10 || node 4/5)\n        var target = proxyOptions.target.host || proxyOptions.target;\n        var errReference = 'https://nodejs.org/api/errors.html#errors_common_system_errors'; // link to Node Common Systems Errors page\n\n        logger.error('[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)', req.url, hostname, target, err.code, errReference);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/lib/config-factory.js":"var _      = require('lodash');\nvar url    = require('url');\nvar logger = require('./logger').getInstance();\n\nmodule.exports = {\n    createConfig: createConfig\n};\n\nfunction createConfig(context, opts) {\n    // structure of config object to be returned\n    var config = {\n        context: undefined,\n        options: {}\n    };\n\n    // app.use('/api', proxy({target:'http://localhost:9000'}));\n    if (isContextless(context, opts)) {\n        config.context = '/';\n        config.options = _.assign(config.options, context);\n    }\n    // app.use('/api', proxy('http://localhost:9000'));\n    // app.use(proxy('http://localhost:9000/api'));\n    else if (isStringShortHand(context)) {\n        var oUrl   = url.parse(context);\n        var target = [oUrl.protocol, '//', oUrl.host].join('');\n\n        config.context = oUrl.pathname || '/';\n        config.options = _.assign(config.options, {target: target}, opts);\n\n        if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n            config.options.ws = true;\n        }\n    // app.use('/api', proxy({target:'http://localhost:9000'}));\n    } else {\n        config.context = context;\n        config.options = _.assign(config.options, opts);\n    }\n\n    configureLogger(config.options);\n\n    if (!config.options.target) {\n        throw new Error('[HPM] Missing \"target\" option. Example: {target: \"http://www.example.org\"}');\n    }\n\n    // Legacy option.proxyHost\n    config.options = mapLegacyProxyHostOption(config.options);\n\n    // Legacy option.proxyTable > option.router\n    config.options = mapLegacyProxyTableOption(config.options);\n\n    return config;\n}\n\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n        app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\nfunction isStringShortHand(context) {\n    if (_.isString(context)) {\n        return (url.parse(context).host) ? true : false;\n    }\n}\n\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\nfunction isContextless(context, opts) {\n    return (_.isPlainObject(context) && _.isEmpty(opts));\n}\n\nfunction mapLegacyProxyHostOption(options) {\n    // set options.headers.host when option.proxyHost is provided\n    if (options.proxyHost) {\n        logger.warn('*************************************');\n        logger.warn('[HPM] Deprecated \"option.proxyHost\"');\n        logger.warn('      Use \"option.changeOrigin\" or \"option.headers.host\" instead');\n        logger.warn('      \"option.proxyHost\" will be removed in future release.');\n        logger.warn('*************************************');\n\n        options.headers = options.headers || {};\n        options.headers.host = options.proxyHost;\n    }\n\n    return options;\n}\n\n// Warn deprecated proxyTable api usage\nfunction mapLegacyProxyTableOption(options) {\n    if (options.proxyTable) {\n        logger.warn('*************************************');\n        logger.warn('[HPM] Deprecated \"option.proxyTable\"');\n        logger.warn('      Use \"option.router\" instead');\n        logger.warn('      \"option.proxyTable\" will be removed in future release.');\n        logger.warn('*************************************');\n\n        options.router = _.clone(options.proxyTable);\n        _.omit(options, 'proxyTable');\n    }\n\n    return options;\n}\n\nfunction configureLogger(options) {\n    if (options.logLevel) {\n        logger.setLevel(options.logLevel);\n    }\n\n    if (options.logProvider) {\n        logger.setProvider(options.logProvider);\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/lib/logger.js":"var util = require('util');\nvar _ = require('lodash');\n\nvar loggerInstance;\n\nvar defaultProvider = {\n    log: console.log,\n    debug: console.log,    // use .log(); since console does not have .debug()\n    info: console.info,\n    warn: console.warn,\n    error: console.error\n};\n\n// log level 'weight'\nvar LEVELS = {\n    debug: 10,\n    info: 20,\n    warn: 30,\n    error: 50,\n    silent: 80\n};\n\nmodule.exports = {\n    // singleton\n    getInstance: function() {\n        if (!loggerInstance) {\n            loggerInstance = new Logger();\n        }\n\n        return loggerInstance;\n    },\n    getArrow: getArrow\n};\n\nfunction Logger() {\n    var logLevel;\n    var provider;\n\n    var api = {\n        log: log,\n        debug: debug,\n        info: info,\n        warn: warn,\n        error: error,\n        setLevel: function(v) {\n            if (isValidLevel(v)) {\n                logLevel = v;\n            }\n        },\n        setProvider: function(fn) {\n            if (fn && isValidProvider(fn)) {\n                provider = fn(defaultProvider);\n            }\n        }\n    };\n\n    init();\n\n    return api;\n\n    function init() {\n        api.setLevel('info');\n        api.setProvider(function() {\n            return defaultProvider;\n        });\n    }\n\n    // log will log messages, regardless of logLevels\n    function log() {\n        provider.log(_interpolate.apply(null, arguments));\n    }\n\n    function debug() {\n        if (_showLevel('debug')) {\n            provider.debug(_interpolate.apply(null, arguments));\n        }\n    }\n\n    function info() {\n        if (_showLevel('info')) {\n            provider.info(_interpolate.apply(null, arguments));\n        }\n    }\n\n    function warn() {\n        if (_showLevel('warn')) {\n            provider.warn(_interpolate.apply(null, arguments));\n        }\n    }\n\n    function error() {\n        if (_showLevel('error')) {\n            provider.error(_interpolate.apply(null, arguments));\n        }\n    }\n\n    /**\n     * Decide to log or not to log, based on the log levels 'weight'\n     * @param  {String}  showLevel [debug, info, warn, error, silent]\n     * @return {Boolean}\n     */\n    function _showLevel(showLevel) {\n        var result = false;\n        var currentLogLevel = LEVELS[logLevel];\n\n        if (currentLogLevel && (currentLogLevel <= LEVELS[showLevel])) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    // make sure logged messages and its data are return interpolated\n    // make it possible for additional log data, such date/time or custom prefix.\n    function _interpolate() {\n        var fn = _.spread(util.format);\n        var result = fn(_.slice(arguments));\n\n        return result;\n    }\n\n    function isValidProvider(fnProvider) {\n        var result = true;\n\n        if (fnProvider && !_.isFunction(fnProvider)) {\n            throw new Error('[HPM] Log provider config error. Expecting a function.');\n        }\n\n        return result;\n    }\n\n    function isValidLevel(levelName) {\n        var validLevels = _.keys(LEVELS);\n        var isValid = _.includes(validLevels, levelName);\n\n        if (!isValid) {\n            throw new Error('[HPM] Log level error. Invalid logLevel.');\n        }\n\n        return isValid;\n    }\n}\n\n/**\n * -> normal proxy\n * => router\n * ~> pathRewrite\n * ≈> router + pathRewrite\n */\nfunction getArrow(originalPath, newPath, originalTarget, newTarget) {\n    var arrow = ['>'];\n    var isNewTarget = (originalTarget !== newTarget); // router\n    var isNewPath = (originalPath !== newPath); // pathRewrite\n\n    if (isNewPath && !isNewTarget) {arrow.unshift('~');} else if (!isNewPath && isNewTarget) {arrow.unshift('=');} else if (isNewPath && isNewTarget) {arrow.unshift('≈');} else {arrow.unshift('-');}\n\n    return arrow.join('');\n}\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/lib/handlers.js":"var _      = require('lodash');\nvar logger = require('./logger').getInstance();\n\nmodule.exports = {\n    init: init,\n    getHandlers: getProxyEventHandlers\n};\n\nfunction init(proxy, opts) {\n    var handlers = getProxyEventHandlers(opts);\n\n    _.forIn(handlers, function(handler, eventName) {\n        proxy.on(eventName, handlers[eventName]);\n    });\n\n    logger.debug('[HPM] Subscribed to http-proxy events: ', _.keys(handlers));\n}\n\nfunction getProxyEventHandlers(opts) {\n    // https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events\n    var proxyEvents = ['error', 'proxyReq', 'proxyReqWs', 'proxyRes', 'open', 'close'];\n    var handlers = {};\n\n    _.forEach(proxyEvents, function(event) {\n        // all handlers for the http-proxy events are prefixed with 'on'.\n        // loop through options and try to find these handlers\n        // and add them to the handlers object for subscription in init().\n        var eventName = _.camelCase('on ' + event);\n        var fnHandler = _.get(opts, eventName);\n\n        if (_.isFunction(fnHandler)) {\n            handlers[event] = fnHandler;\n        }\n    });\n\n    // add default error handler in absence of error handler\n    if (!_.isFunction(handlers.error)) {\n        handlers.error = defaultErrorHandler;\n    }\n\n    // add default close handler in absence of close handler\n    if (!_.isFunction(handlers.close)) {\n        handlers.close = logClose;\n    }\n\n    return handlers;\n};\n\nfunction defaultErrorHandler(err, req, res) {\n    var host = (req.headers && req.headers.host);\n    var code = err.code;\n\n    if (res.writeHead && !res.headersSent) {\n        if (/HPE_INVALID/.test(code)) {\n            res.writeHead(502);\n        } else {\n            switch(code) {\n                case 'ECONNRESET':\n                case 'ENOTFOUND':\n                case 'ECONNREFUSED':\n                    res.writeHead(504);\n                    break;\n                default: res.writeHead(500);\n            }\n        }\n    }\n\n    res.end('Error occured while trying to proxy to: ' + host + req.url);\n}\n\nfunction logClose(req, socket, head) {\n    // view disconnected websocket connections\n    logger.info('[HPM] Client disconnected');\n}\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/lib/context-matcher.js":"var _ = require('lodash');\nvar url = require('url');\nvar isGlob = require('is-glob');\nvar micromatch = require('micromatch');\n\nmodule.exports = {\n    match: matchContext\n};\n\nfunction matchContext(context, uri, req) {\n\n    // single path\n    if (isStringPath(context)) {\n        return matchSingleStringPath(context, uri);\n    }\n\n    // single glob path\n    if (isGlobPath(context)) {\n        return matchSingleGlobPath(context, uri);\n    }\n\n    // multi path\n    if (Array.isArray(context)) {\n        if (context.every(isStringPath)) {\n            return matchMultiPath(context, uri);\n        }\n        if (context.every(isGlobPath)) {\n            return matchMultiGlobPath(context, uri);\n        }\n\n        throw new Error('[HPM] Invalid context. Expecting something like: [\"/api\", \"/ajax\"] or [\"/api/**\", \"!**.html\"]');\n    }\n\n    // custom matching\n    if (_.isFunction(context)) {\n        var pathname = getUrlPathName(uri);\n        return context(pathname, req);\n    }\n\n    throw new Error('[HPM] Invalid context. Expecting something like: \"/api\" or [\"/api\", \"/ajax\"]');\n}\n\n/**\n * @param  {String} context '/api'\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\nfunction matchSingleStringPath(context, uri) {\n    var pathname = getUrlPathName(uri);\n    return pathname.indexOf(context) === 0;\n}\n\nfunction matchSingleGlobPath(pattern, uri) {\n    var pathname = getUrlPathName(uri);\n    var matches = micromatch(pathname, pattern);\n    return matches && (matches.length > 0);\n}\n\nfunction matchMultiGlobPath(patternList, uri) {\n    return matchSingleGlobPath(patternList, uri);\n}\n\n/**\n * @param  {String} context ['/api', '/ajax']\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\nfunction matchMultiPath(contextList, uri) {\n    for (var i = 0; i < contextList.length; i++) {\n        var context = contextList[i];\n        if (matchSingleStringPath(context, uri)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Parses URI and returns RFC 3986 path\n *\n * @param  {String} uri from req.url\n * @return {String}     RFC 3986 path\n */\nfunction getUrlPathName(uri) {\n    return uri && url.parse(uri).pathname;\n}\n\nfunction isStringPath(context) {\n    return _.isString(context) && !isGlob(context);\n}\n\nfunction isGlobPath(context) {\n    return isGlob(context);\n}\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/lib/path-rewriter.js":"var _      = require('lodash');\nvar logger = require('./logger').getInstance();\n\nmodule.exports = {\n    create: createPathRewriter\n};\n\n/**\n * Create rewrite function, to cache parsed rewrite rules.\n *\n * @returns {function} Function to rewrite paths; This function should accept `path` (request.url) as parameter\n */\nfunction createPathRewriter(rewriteConfig) {\n    var rulesCache;\n\n    if (!isValidRewriteConfig(rewriteConfig)) {\n        return;\n    }\n\n    if (_.isFunction(rewriteConfig)) {\n        var customRewriteFn = rewriteConfig;\n        return customRewriteFn;\n    } else {\n        rulesCache = parsePathRewriteRules(rewriteConfig);\n        return rewritePath;\n    }\n\n    function rewritePath(path) {\n        var result = path;\n\n        _.forEach(rulesCache, function(rule) {\n            if (rule.regex.test(path)) {\n                result = result.replace(rule.regex, rule.value);\n                logger.debug('[HPM] Rewriting path from \"%s\" to \"%s\"', path, result);\n                return false;\n            }\n        });\n\n        return result;\n    }\n}\n\nfunction isValidRewriteConfig(rewriteConfig) {\n    if (_.isFunction(rewriteConfig)) {\n        return true;\n    } else if (!_.isEmpty(rewriteConfig) && _.isPlainObject(rewriteConfig)) {\n        return true;\n    } else if (_.isUndefined(rewriteConfig) ||\n               _.isNull(rewriteConfig) ||\n               _.isEqual(rewriteConfig, {})) {\n        return false;\n    } else {\n        throw new Error('[HPM] Invalid pathRewrite config. Expecting object with pathRewrite config or a rewrite function');\n    }\n}\n\nfunction parsePathRewriteRules(rewriteConfig) {\n    var rules = [];\n\n    if (_.isPlainObject(rewriteConfig)) {\n        _.forIn(rewriteConfig, function(value, key) {\n            rules.push({\n                regex: new RegExp(key),\n                value: rewriteConfig[key]\n            });\n            logger.info('[HPM] Proxy rewrite rule created: \"%s\" ~> \"%s\"', key, rewriteConfig[key]);\n        });\n    }\n\n    return rules;\n}\n\n","/home/travis/build/npmtest/node-npmtest-http-proxy-middleware/node_modules/http-proxy-middleware/lib/router.js":"var _      = require('lodash');\nvar logger = require('./logger.js').getInstance();\n\nmodule.exports = {\n    getTarget: getTarget\n};\n\nfunction getTarget(req, config) {\n    var newTarget;\n    var router = config.router;\n\n    if (_.isPlainObject(router)) {\n        newTarget = getTargetFromProxyTable(req, router);\n    } else if (_.isFunction(router)) {\n        newTarget = router(req);\n    }\n\n    return newTarget;\n}\n\nfunction getTargetFromProxyTable(req, table) {\n    var result;\n    var host = req.headers.host;\n    var path = req.url;\n\n    var hostAndPath = host + path;\n\n    _.forIn(table, function(value, key) {\n        if (containsPath(key)) {\n\n            if (hostAndPath.indexOf(key) > -1) {    // match 'localhost:3000/api'\n                result = table[key];\n                logger.debug('[HPM] Router table match: \"%s\"', key);\n                return false;\n            }\n        } else {\n\n            if (key === host) {                     // match 'localhost:3000'\n                result = table[key];\n                logger.debug('[HPM] Router table match: \"%s\"', host);\n                return false;\n            }\n\n        }\n\n    });\n\n    return result;\n}\n\nfunction containsPath(v) {\n    return v.indexOf('/') > -1;\n}\n"}